# Copyright Â©2023 Vulcanize
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
import base64

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http:#www.gnu.org/licenses/>.

import shutil
import sys
import tempfile
from datetime import datetime

import gnupg
import click
import requests
import yaml

from stack_orchestrator.deploy.webapp.util import (
    LaconicRegistryClient,
)
from dotenv import dotenv_values


def fatal(msg: str):
    print(msg, file=sys.stderr)
    sys.exit(1)


@click.command()
@click.option(
    "--laconic-config", help="Provide a config file for laconicd", required=True
)
@click.option(
    "--app",
    help="The LRN of the application to deploy.",
    required=True,
)
@click.option(
    "--deployer",
    help="The LRN of the deployer to process this request.",
    required=True,
)
@click.option("--env-file", help="environment file for webapp")
@click.option("--config-ref", help="The ref of an existing config upload to use.")
@click.option(
    "--make-payment",
    help="The payment to make (in alnt).  The value should be a number or 'auto' to use the deployer's minimum required payment.",
)
@click.option(
    "--use-payment", help="The TX id of an existing, unused payment", default=None
)
@click.option("--dns", help="the DNS name to request (default is autogenerated)")
@click.option(
    "--dry-run",
    help="Don't publish anything, just report what would be done.",
    is_flag=True,
)
@click.pass_context
def command(
    ctx,
    laconic_config,
    app,
    deployer,
    env_file,
    config_ref,
    make_payment,
    use_payment,
    dns,
    dry_run,
):  # noqa: C901
    tempdir = tempfile.mkdtemp()
    try:
        laconic = LaconicRegistryClient(laconic_config)

        app_record = laconic.get_record(app)
        if not app_record:
            fatal(f"Unable to locate app: {app}")

        deployer_record = laconic.get_record(deployer)
        if not deployer_record:
            fatal(f"Unable to locate deployer: {deployer}")

        if env_file and config_ref:
            fatal("Cannot use --env-file and --config-ref at the same time.")

        # If env_file
        if env_file:
            gpg = gnupg.GPG(gnupghome=tempdir)

            # Import the deployer's public key
            result = gpg.import_keys(
                base64.b64decode(deployer_record.attributes.publicKey)
            )
            if 1 != result.imported:
                fatal("Failed to import deployer's public key.")

            recip = gpg.list_keys()[0]["uids"][0]

            # Wrap the config
            config = {
                # Include account (and payment?) details
                "authorized": [laconic.whoami().address],
                "config": {"env": dict(dotenv_values(env_file))},
            }
            serialized = yaml.dump(config)

            # Encrypt
            result = gpg.encrypt(serialized, recip, always_trust=True, armor=False)
            if not result.ok:
                fatal("Failed to encrypt config.")

            # Upload it to the deployer's API
            response = requests.post(
                f"{deployer_record.attributes.apiUrl}/upload/config",
                data=result.data,
                headers={"Content-Type": "application/octet-stream"},
            )
            if not response.ok:
                response.raise_for_status()

            config_ref = response.json()["id"]

        deployment_request = {
            "record": {
                "type": "ApplicationDeploymentRequest",
                "application": app,
                "version": "1.0.0",
                "name": f"{app_record.attributes.name}@{app_record.attributes.version}",
                "deployer": deployer,
                "meta": {"when": str(datetime.utcnow())},
            }
        }

        if config_ref:
            deployment_request["record"]["config"] = {"ref": config_ref}

        if dns:
            deployment_request["record"]["dns"] = dns.lower()

        if make_payment:
            amount = 0
            if dry_run:
                deployment_request["record"]["payment"] = "DRY_RUN"
            elif "auto" == make_payment:
                if "minimumPayment" in deployer_record.attributes:
                    amount = int(
                        deployer_record.attributes.minimumPayment.replace("alnt", "")
                    )
            else:
                amount = make_payment
            if amount:
                receipt = laconic.send_tokens(
                    deployer_record.attributes.paymentAddress, amount
                )
                deployment_request["record"]["payment"] = receipt.tx.hash
                print("Payment TX:", receipt.tx.hash)
        elif use_payment:
            deployment_request["record"]["payment"] = use_payment

        if dry_run:
            print(yaml.dump(deployment_request))
            return

        # Send the request
        laconic.publish(deployment_request)
    finally:
        shutil.rmtree(tempdir, ignore_errors=True)
